datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Institution {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String   @unique
    acronym   String   @unique
    url       String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Campuses  Campus[]

    @@map("institutions")
}

model Campus {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String      @unique
    Institution   Institution @relation(fields: [institutionId], references: [id])
    institutionId String      @db.ObjectId
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@map("campuses")
}

model Session {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    value     String   @unique
    token     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Student   Student  @relation(fields: [studentId], references: [id])
    studentId String   @unique @db.ObjectId

    // em algum momento futuro, a sessão será referenciada pelo vinculo.
    @@map("sessions")
}

model Bond {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    program      String
    registration String   @unique
    period       String
    campus       String
    sequence     Int
    active       Boolean  @default(true)
    Student      Student  @relation(fields: [studentId], references: [id])
    studentId    String   @db.ObjectId
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    Courses      Course[]

    @@map("bonds")
}

// model compartilhado para alunos do mesmo periodo que há a mesma matéria, ou seja, com o title, id, code, schedule... compartilhados
// informações comuns são compartilhadas entre alunos do mesmo periodo
model SharedCourse {
    id               String   @id @default(auto()) @map("_id") @db.ObjectId
    courseId         String   @unique
    title            String
    code             String
    schedule         String
    period           String
    numberOfStudents Int
    postValues       String
    // homeworks     Homework[] {name, description, deadline, files}
    // lessons       Lesson[]
    // news          News[]
    Courses          Course[]
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    @@map("shared_courses")
}

// model para cada aluno, com suas informações particulares, notas, frequencia...
model Course {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    // homeworks   Homework[]   // {done}
    grades         GradesGroup[]
    // absences    Absence[]
    Bond           Bond          @relation(fields: [bondId], references: [id])
    bondId         String        @db.ObjectId
    SharedCourse   SharedCourse  @relation(fields: [sharedCourseId], references: [id])
    sharedCourseId String        @db.ObjectId

    @@map("courses")
}

model Student {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    username          String   @unique
    fullName          String
    passwordHash      String
    emails            String[]
    profilePictureURL String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    Bond              Bond[]
    Session           Session?

    @@map("students")
}

model GradesGroup {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    type      String
    value     Float
    subGrades SubGrade[]
    Course    Course?    @relation(fields: [courseId], references: [id])
    courseId  String?    @db.ObjectId

    @@map("grades_groups")
}

model SubGrade {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    code          String
    value         Float?
    maxValue      Float?
    weight        Float?
    GradesGroup   GradesGroup @relation(fields: [gradesGroupId], references: [id])
    gradesGroupId String      @db.ObjectId

    @@map("sub_grades")
}
